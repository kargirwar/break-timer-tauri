[package]
name = "app"
version = "0.1.0"
description = "A Tauri App"
authors = ["you"]
license = ""
repository = ""
default-run = "app"
edition = "2021"
rust-version = "1.60"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[build-dependencies]
tauri-build = { version = "1.4.0", features = [] }

[dependencies]
tauri = { version = "1.4.0", features = [] }
soloud = "1"
plist = "1"
tokio = { version = "1", features = ["full"] }
tokio-util = { version = "0.7.8" }
crossbeam-channel = "0.5"
env_logger = "0.10"
arc-swap = "1.2"
chrono = { version = "0.4", optional = true }
flate2 = { version = "1.0", optional = true }
fnv = "1.0"
humantime = { version = "2.0", optional = true }
log = { version = "0.4.0", features = ["std"] }
log-mdc = { version = "0.1", optional = true }
serde = { version = "1.0", optional = true, features = ["derive"] }
serde-value = { version = "0.7", optional = true }
thread-id = { version = "4", optional = true }
typemap-ors = { version = "1.0.0", optional = true }
serde_json = { version = "1.0", optional = true }
serde_yaml = { version = "0.8.4", optional = true }
toml = { version = "0.5", optional = true }
parking_lot = { version = "0.12.0", optional = true }
thiserror = "1.0.15"
anyhow = "1.0.28"
derivative = "2.1.1"
log4rs = "1.0"
dirs = "3.0"
once_cell = "1.8"

[features]
# this feature is used for production builds or when `devPath` points to the filesystem and the built-in dev server is disabled.
# If you use cargo directly instead of tauri's cli you can use this feature flag to switch between tauri's `dev` and `build` modes.
# DO NOT REMOVE!!
custom-protocol = [ "tauri/custom-protocol" ]
default = ["all_components", "config_parsing", "yaml_format"]

config_parsing = ["humantime", "serde", "serde-value", "typemap-ors", "log/serde"]
yaml_format = ["serde_yaml"]
json_format = ["serde_json"]
toml_format = ["toml"]

console_appender = ["console_writer", "simple_writer", "pattern_encoder"]
file_appender = ["parking_lot", "simple_writer", "pattern_encoder"]
rolling_file_appender = ["parking_lot", "simple_writer", "pattern_encoder"]
compound_policy = []
delete_roller = []
fixed_window_roller = []
size_trigger = []
json_encoder = ["serde", "serde_json", "chrono", "log-mdc", "log/serde", "thread-id"]
pattern_encoder = ["chrono", "log-mdc", "thread-id"]
ansi_writer = []
console_writer = ["ansi_writer", "libc", "winapi"]
simple_writer = []
threshold_filter = []
background_rotation = []

all_components = [
    "console_appender",
    "file_appender",
    "rolling_file_appender",
    "compound_policy",
    "delete_roller",
    "fixed_window_roller",
    "size_trigger",
    "json_encoder",
    "pattern_encoder",
    "threshold_filter"
]

gzip = ["flate2"]

[target.'cfg(windows)'.dependencies]
winapi = { version = "0.3", optional = true, features = ["handleapi", "minwindef", "processenv", "winbase", "wincon"] }

[target.'cfg(not(windows))'.dependencies]
libc = { version = "0.2", optional = true }

[dev-dependencies]
lazy_static = "1.4"
streaming-stats = "0.2.3"
humantime = "2.0"
tempfile = "3.1.0"
